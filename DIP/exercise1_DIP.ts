/**
 * ‚ùå Problemas deste c√≥digo caso v√° para produ√ß√£o:
 *
 * 1Ô∏è‚É£ **Viola√ß√£o do Princ√≠pio da Invers√£o de Depend√™ncia (DIP)**:
 *    - A classe `SistemaDeNotificacoes` depende diretamente da implementa√ß√£o `EmailService`, em vez de depender de uma abstra√ß√£o.
 *
 * 2Ô∏è‚É£ **Baixa flexibilidade**:
 *    - Se quisermos adicionar novos tipos de notifica√ß√µes (ex: SMS, WhatsApp), teremos que modificar `SistemaDeNotificacoes`, violando OCP tamb√©m.
 *
 * 3Ô∏è‚É£ **Dificuldade de Testes**:
 *    - Como `SistemaDeNotificacoes` depende diretamente de `EmailService`, n√£o conseguimos testar o sistema sem enviar e-mails reais.
 */

class EmailService {
  enviarEmail(destinatario: string, mensagem: string): void {
    console.log(`üìß Enviando e-mail para ${destinatario}: ${mensagem}`);
  }
}

// ‚ùå O sistema depende diretamente de EmailService
class SistemaDeNotificacoes {
  private emailService: EmailService;

  constructor() {
    this.emailService = new EmailService();
  }

  notificar(destinatario: string, mensagem: string): void {
    this.emailService.enviarEmail(destinatario, mensagem);
  }
}

// üè° Testando o sistema (com problema de depend√™ncia)
const sistema = new SistemaDeNotificacoes();
sistema.notificar("usuario@email.com", "Bem-vindo ao nosso sistema!");